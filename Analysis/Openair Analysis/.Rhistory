polarPlot(mydata, pollutant = 'nox', year = 2001)
polarPlot(mydata, pollutant = 'nox', type = 'year')
subdata = subset(mydata, as.numeric(rownames(mydata)) < 50,select = c(date, nox, no2, wd,ws))
View(subdata)
polarPlot(subdata, pollutant = 'nox', type = 'year')
polarPlot(subdata, pollutant = 'nox', type = 'year', statistic = 'nwr')
a
?polarPlot
polarPlot(subdata, pollutant = 'nox', type = 'year', statistic = 'nwr')
View(subdata)
subdata = subset(mydata, as.numeric(rownames(mydata)) < 101,select = c(date, nox, no2, wd,ws))
polarPlot(subdata, pollutant = 'nox', type = 'year')
subdata = subset(mydata, as.numeric(rownames(mydata)) < 120,select = c(date, nox, no2, wd,ws))
polarPlot(subdata, pollutant = 'nox', type = 'year')
subdata = subset(mydata, as.numeric(rownames(mydata)) < 150,select = c(date, nox, no2, wd,ws))
polarPlot(subdata, pollutant = 'nox', type = 'year')
mean(subdata$wd)
mean(subdata$ws)
rm(subtestdata)
timeAverage(mydata, avg.time = 'year')
testdata = timeAverage(mydata, avg.time = 'year')
View(testdata)
testdata = timeAverage(mydata, avg.time = 'month')
View(testdata)
polarPlot(mydata, pollutant = 'o3')
polarPlot(mydata, pollutant = 'o3', type = 'year')
polarPlot(mydata, pollutant = 'o3', type = c('year', 'month'))
library(openair)
library(openair)
mydata = read.csv('example.csv', header = TRUE)
mydata$date = as.POSIXct(strptime(mydata$date, format = "%d/%m/%Y %H:%M", tz ="GMT"))
polarPlot(mydata, pollutant = 'o3', type = 'year')
polarPlot(mydata, pollutant = 'o3', type = 'year', layout = c(2,4))
#Polar Plot
subdata = subset(mydata, as.numeric(rownames(mydata)) < 1000,select = c(date, nox, no2, wd,ws))
polarPlot(subdata, pollutant = 'o3', type = 'year')
polarPlot(subdata, pollutant = 'nox', type = 'year')
?polarPlot
polarPlot(subdata, pollutant = 'nox', type = 'daylight')
#Polar Plot
subdata = subset(mydata, as.numeric(rownames(mydata)) < 10000,select = c(date, nox, no2, wd,ws))
polarPlot(subdata, pollutant = 'nox', type = 'daylight')
polarPlot(subdata, pollutant = 'nox', type = 'day')
polarPlot(subdata, pollutant = 'nox', type = 'weekend')
polarPlot(subdata, pollutant = 'nox', type = 'weekday')
polarPlot(subdata, pollutant = 'nox', type = 'hour)
?polarPlot
polarPlot(subdata, pollutant = 'nox', type = 'hour')
polarPlot(subdata, pollutant = 'nox', type = 'hour')
#Polar Annulus
polarAnnulus(subdata, pollutant = 'nox')
#Polar Plot
subdata = subset(mydata, as.numeric(rownames(mydata)) < 1000,select = c(date, nox, no2, wd,ws))
#Polar Annulus
polarAnnulus(subdata, pollutant = 'nox')
#Wind Rose
windRose(mydata, wd = 'wd', ws = 'ws')
polarPlot(subdata, pollutant = 'nox', type = 'hour')
#Polar Plot
subdata = subset(mydata, as.numeric(rownames(mydata)) < 1000,select = c(date, nox, no2, wd,ws))
polarPlot(subdata, pollutant = 'nox', type = 'year')
polarPlot(subdata, pollutant = 'nox', type = 'year',
cols = 'jet')
#Summary
summaryPlot(subdata)
#Summary
summaryPlot(subdata, period = 'months')
#Polar Plot
subdata = subset(mydata, as.numeric(rownames(mydata)) < 2000,select = c(date, nox, no2, wd,ws))
#Summary
summaryPlot(subdata, period = 'months')
?polarPlot
polarPlot(subdata, pollutant = 'nox', type = 'year',
cols = 'jet')
polarPlot(subdata, pollutant = 'nox', type = 'year',
cols = 'jet', statistic = 'cpf')
polarPlot(subdata, pollutant = 'nox', type = 'year',
cols = 'jet')
polarPlot(subdata, pollutant = 'nox', type = 'year',
cols = 'jet', statistic = 'cpf')
# Multiple Plots
a = polarPlot(subdata, pollutant =  'nox')
# Multiple Plots
polarPlot(subdata, pollutant =  'nox')
# Multiple Plots
polarPlot(subdata, pollutant =  'nox', colos = 'jet')
# Multiple Plots
polarPlot(subdata, pollutant =  'nox', colos = 'jet', statistic = 'cpf')
b = polarPlot(subdata, pollutant =  'nox', colos = 'jet', statistic = 'c[f')
b = polarPlot(subdata, pollutant =  'nox', colos = 'jet', statistic = 'cpf')
print(a, split = c(1, 1, 2, 1))
print(b, split = c(2, 1, 2, 1), newpage = FALSE)
# Multiple Plots
polarPlot(subdata, pollutant =  'nox', colos = 'jet')
polarPlot(subdata, pollutant =  'nox', colos = 'jet', statistic = 'cpf')
?polarPlot
polarPlot(subdata, pollutant =  'nox', colos = 'jet', statistic = 'cpf',
auto.text = FALSE)
polarPlot(subdata, pollutant =  'nox', colos = 'jet', statistic = 'cpf',
auto.text = FALSE)
# Multiple Plots
a = polarPlot(subdata, pollutant =  'nox', colos = 'jet')
b = polarPlot(subdata, pollutant =  'nox', colos = 'jet', statistic = 'cpf')
print(a, split = c(1, 1, 2, 1))
print(b, split = c(2, 1, 2, 1), newpage = FALSE)
# Multiple Plots
subdata = subset(mydata, as.numeric(rownames(mydata)) < 20000,select = c(date, nox, no2, wd,ws))
a = polarPlot(subdata, pollutant =  'nox', colos = 'jet')
b = polarPlot(subdata, pollutant =  'nox', colos = 'jet', statistic = 'cpf')
print(a, split = c(1, 1, 2, 1))
print(b, split = c(2, 1, 2, 1), newpage = FALSE)
# Multiple Plots
subdata = subset(mydata, as.numeric(rownames(mydata)) < 60000,select = c(date, nox, no2, wd,ws))
a = polarPlot(subdata, pollutant =  'nox', colos = 'jet')
b = polarPlot(subdata, pollutant =  'nox', colos = 'jet', statistic = 'cpf')
print(a, split = c(1, 1, 2, 1))
print(b, split = c(2, 1, 2, 1), newpage = FALSE)
a = polarPlot(subdata, pollutant =  'no2', colos = 'jet')
b = polarPlot(subdata, pollutant =  'no2', colos = 'jet', statistic = 'cpf')
print(a, split = c(1, 1, 2, 1))
print(b, split = c(2, 1, 2, 1), newpage = FALSE)
# Multiple Plots
subdata = subset(mydata, as.numeric(rownames(mydata)) < 100,select = c(date, nox, no2, wd,ws))
View(subdata)
a = polarPlot(subdata, pollutant =  'no2', colos = 'jet')
b = polarPlot(subdata, pollutant =  'no2', colos = 'jet', statistic = 'cpf')
print(a, split = c(1, 1, 2, 1))
print(b, split = c(2, 1, 2, 1), newpage = FALSE)
# Multiple Plots
subdata = subset(mydata, as.numeric(rownames(mydata)) < 1000,select = c(date, nox, no2, wd,ws))
a = polarPlot(subdata, pollutant =  'no2', colos = 'jet')
b = polarPlot(subdata, pollutant =  'no2', colos = 'jet', statistic = 'cpf')
print(a, split = c(1, 1, 2, 1))
print(b, split = c(2, 1, 2, 1), newpage = FALSE)
a = polarPlot(subdata, pollutant =  'no2', colos = 'jet', resolution = 'fine')
a = polarPlot(subdata, pollutant =  'no2', colos = 'jet', resolution = 'normal')
a = polarPlot(subdata, pollutant =  'no2', colos = 'jet', resolution = 'fine')
b = polarPlot(subdata, pollutant =  'no2', colos = 'jet', statistic = 'cpf', percentile = c(90, 100))
b = polarPlot(subdata, pollutant =  'no2', colos = 'jet', statistic = 'cpf', percentile = c(40, 100))
b = polarPlot(subdata, pollutant =  'no2', colos = 'jet', statistic = 'cpf', percentile = c(0, 100))
b = polarPlot(subdata, pollutant =  'no2', colos = 'jet', statistic = 'cpf', percentile = c(10, 100))
b = polarPlot(subdata, pollutant =  'no2', colos = 'jet', statistic = 'cpf', percentile = c(95, 100))
?polarPlot
b = polarPlot(subdata, pollutant =  'no2', colos = 'jet', statistic = 'cpf')
b = polarPlot(subdata, pollutant =  'no2', colos = 'jet', statistic = 'cpf', , percentile = c(95, 100))
# Multiple Plots
subdata = subset(mydata, as.numeric(rownames(mydata)) < 10000,select = c(date, nox, no2, wd,ws))
b = polarPlot(subdata, pollutant =  'no2', colos = 'jet', statistic = 'cpf')
b = polarPlot(subdata, pollutant =  'no2', colos = 'jet', statistic = 'cpf', percentile = c(95, 100))
b = polarPlot(subdata, pollutant =  'no2', colos = 'jet', statistic = 'cpf', percentile = c(90, 100))
b = polarPlot(subdata, pollutant =  'no2', colos = 'jet', statistic = 'cpf', percentile = c(95, 100))
testdata = read.csv('example.csv', header = TRUE)
read.csv('C-2020-07-13.csv', header = TRUE)
testdata = read.csv('C-2020-07-13.csv', header = TRUE)
View(testdata)
?as.POSIXct
ISOdatetime(1594636040)
unixtime = 1594636040
ISOdatetime(1970,1,1,0,0,0) + unixtime
a = ISOdatetime(1970,1,1,0,0,0) + unixtime
b = ISOdatetime(1970,1,1,0,0,0) + lasttime
lasttime = 1594666003
b = ISOdatetime(1970,1,1,0,0,0) + lasttime
testdata$Unixtime[0:10]
testdata$Wind.Speed[0:10]
head(testdata)
testdata.columns()
testdata.colnames()
colnames(testdata)
testdata$ï..UnixTime[0:10]
testdata$DateTime = ISOdatetime(1970,1,1,0,0,0) + testdata$ï..UnixTime
colnames(testdata)
colnames(testdata)[0]
colnames(testdata)[1]
colnames(testdata)[1] = UnixTime
colnames(testdata)[1] <- UnixTime
colnames(testdata)[1] = 'UnixTime'
testdata = read.csv('C-2020-07-13.csv', header = TRUE)
colnames(testdata)[1:2] = c('UnixTime', 'ws')
testdata$DateTime = ISOdatetime(1970,1,1,0,0,0) + testdata$UnixTime
colnames(testdata)[1:3] = c('UnixTime', 'ws', 'wd')
testdata$DateTime = ISOdatetime(1970,1,1,0,0,0) + testdata$UnixTime
colnames(testdata)[1:4] = c('UnixTime', 'ws', 'wd', 'co2')
colnames(testdata)[1:5] = c('UnixTime', 'ws', 'wd', 'co2', 'date')
testdata$DateTime = ISOdatetime(1970,1,1,0,0,0) + testdata$UnixTime
polarPlot(subdata, pollutant =  'no2', colos = 'jet', resolution = 'fine')
polarPlot(subdata, pollutant =  'no2', colors=  'jet', resolution = 'fine')
polarPlot(testdata, pollutant =  'no2', colors =  'jet', resolution = 'fine')
polarPlot(testdata, pollutant =  'co2', colors =  'jet', resolution = 'fine')
windRose(testdata, wd = 'wd', ws = 'ws')
polarAnnulus(testdata, pollutant = 'co2')
polarPlot(testdata, pollutant =  'co2', colors =  'jet', resolution = 'fine')
polarPlot(testdata, pollutant =  'co2', colors =  'jet',
resolution = 'fine',
statistic = 'percentile')
statistic = 'nwr)
polarPlot(testdata, pollutant =  'co2', colors =  'jet',
resolution = 'fine',
statistic = 'nwr')
polarPlot(testdata, pollutant =  'co2', colors =  'jet',
resolution = 'fine',
statistic = 'nwr')
?openair
polarPlot(testdata, pollutant =  'co2', colors =  'jet',
resolution = 'fine',
statistic = 'nwr')
#Polar Plot
subdata = subset(mydata, as.numeric(rownames(mydata)) < 100,select = c(date, nox, no2, wd,ws))
View(subdata)
polarPlot(subdata, pollutant = 'nox', type = 'year',
cols = 'jet', statistic = 'cpf')
#Polar Plot
subdata = subset(mydata, as.numeric(rownames(mydata)) < 150,select = c(date, nox, no2, wd,ws))
polarPlot(subdata, pollutant = 'nox', type = 'year',
cols = 'jet', statistic = 'cpf')
#Polar Plot
subdata = subset(mydata, as.numeric(rownames(mydata)) < 120,select = c(date, nox, no2, wd,ws))
polarPlot(subdata, pollutant = 'nox', type = 'year',
cols = 'jet', statistic = 'cpf')
#Polar Plot
subdata = subset(mydata, as.numeric(rownames(mydata)) < 130,select = c(date, nox, no2, wd,ws))
polarPlot(subdata, pollutant = 'nox', type = 'year',
cols = 'jet', statistic = 'cpf')
#Polar Plot
subdata = subset(mydata, as.numeric(rownames(mydata)) < 140,select = c(date, nox, no2, wd,ws))
polarPlot(subdata, pollutant = 'nox', type = 'year',
cols = 'jet', statistic = 'cpf')
#Polar Plot
subdata = subset(mydata, as.numeric(rownames(mydata)) < 150,select = c(date, nox, no2, wd,ws))
polarPlot(subdata, pollutant = 'nox', type = 'year',
cols = 'jet', statistic = 'cpf')
library(openair)
testdata = read.csv('C-2020-07-13.csv', header = TRUE)
View(testdata)
colnames(testdata)[1:5] = c('UnixTime', 'ws', 'wd', 'co2', 'date')
testdata$DateTime = ISOdatetime(1970,1,1,0,0,0) + testdata$UnixTime
View(testdata)
colnames(testdata)[1:5] = c('UnixTime', 'ws', 'wd', 'co2', 'date')
colnames(testdata)[1:5] = c('UnixTime', 'ws', 'wd', 'co2')
colnames(testdata)[1:4] = c('UnixTime', 'ws', 'wd', 'co2')
testdata$date = ISOdatetime(1970,1,1,0,0,0) + testdata$UnixTime
polarPlot(testdata, pollutant =  'co2', colors =  'jet',
resolution = 'fine',
statistic = 'nwr')
print('Hi')
?openair
polarPlot(testdata, pollutant =  'co2', colors =  'jet',
resolution = 'fine',
statistic = 'nwr')
polarPlot(testdata, pollutant =  'co2', colors =  'jet',
resolution = 'fine')
polarPlot(testdata, pollutant =  'co2', colors =  'jet',
resolution = 'fine',
statistic = 'nwr')
View(testdata)
testdata$ws[testdata$ws == 0] = 0.001
View(testdata)
testdata$ws[testdata$ws == 0] = 0.1
View(testdata)
testdata$ws[testdata$ws == 0.001] = 0.1
polarPlot(testdata, pollutant =  'co2', colors =  'jet',
resolution = 'fine',
statistic = 'nwr')
polarPlot(testdata, pollutant =  'co2', colors =  'jet',
resolution = 'default',
statistic = 'nwr')
polarPlot(testdata, pollutant =  'co2', colors =  'jet',
resolution = 'default',
statistic = 'nwr')
polarPlot(testdata, pollutant =  'co2', colors =  'jet',
resolution = 'default',
statistic = 'nwr')
polarPlot(testdata, pollutant =  'co2', colors =  'jet',
resolution = 'default',
statistic = 'nwr')
polarPlot(testdata, pollutant =  'co2', colors =  'jet',
#resolution = 'default',
statistic = 'nwr')
print('')
polarPlot(testdata, pollutant =  'co2', colors =  'jet'),
#resolution = 'default',
#statistic = 'nwr')
print('')
polarPlot(testdata, pollutant =  'co2', colors =  'jet')
?polarPlot
polarPlot(testdata, pollutant =  'co2', colors =  'jet', k = 50)
View(testdata)
testdata$ws[testdata$ws == 0.1] = 1
polarPlot(testdata, pollutant =  'co2', colors =  'jet', k = 50)
polarPlot(testdata, pollutant =  'co2', colors =  'jet', k = 10)
polarPlot(testdata, pollutant =  'co2', colors =  'jet', k = 20)
polarPlot(testdata, pollutant =  'co2', colors =  'jet', k = 30)
polarPlot(testdata, pollutant =  'co2', colors =  'jet', k = 30
statistic = 'nwr')
polarPlot(testdata, pollutant =  'co2', colors =  'jet', k = 100,
statistic = 'nwr')
,
#resolution = 'default',
#statistic = 'nwr')
print('')
testdata$ws[testdata$ws == 1] = 0
?polarPlot
polarPlot(testdata, pollutant =  'co2', colors =  'jet', k = 100,
statistic = 'nwr')
########## Load Data ##########
library(openair)
testdata     = read.csv('2020-07-17--16.csv', header = TRUE)
testdata     = read.csv('2020-07-17--16.csv', header = TRUE)
View(testdata)
colnames(testdata)[1:4] = c('UnixTime', 'ws', 'wd', 'co2')
View(testdata)
testdata$date           = ISOdatetime(1970,1,1,0,0,0) + testdata$UnixTime
testdata$UnixTime       = NULL
testdata                = testdata[c(4,1,2,3)]
testdata$ws[testdata$ws == 0.0] = 0.1
testdata$ws = testdata$ws/5*1.492
testdata$wd = testdata$wd*22.5
########## Normal Plot ##########
plot(testdata$ws, type = 'l', col = 'red')
plot(testdata$wsavg, type = 'l', col = 'blue')
plot(testdata$wd, type = 'l', col = 'red')
plot(testdata$co2, type = 'l', col = 'red')
par(new=TRUE)
########## Polar Plot ##########
polarPlot(testdata, pollutant = 'co2')
polarPlot(testdata, pollutant = 'co2', statistic = 'nwr')
polarPlot(testdata, pollutant = 'co2', statistic = 'cpf',
uncertainty = TRUE)
windRose(testdata, wd = 'wd', ws = 'ws')
########## Polar Plot ##########
polarPlot(testdata, pollutant = 'co2')
########## Polar Plot ##########
polarPlot(testdata, pollutant = 'co2')
testdata     = read.csv('2020-07-17--16.csv', header = TRUE)
colnames(testdata)[1:4] = c('UnixTime', 'ws', 'wd', 'co2')
testdata$date           = ISOdatetime(1970,1,1,0,0,0) + testdata$UnixTime
testdata$UnixTime       = NULL
testdata                = testdata[c(4,1,2,3)]
testdata$ws[testdata$ws == 0.0] = 0.1
plot(testdata$co2, type = 'l', col = 'red')
plot(testdata$co2, type = 'l', col = 'red')
plot(testdata$wd, type = 'l', col = 'red')
########## Normal Plot ##########
plot(testdata$ws, type = 'l', col = 'red')
########## Polar Plot ##########
polarPlot(testdata, pollutant = 'co2')
polarPlot(testdata, pollutant = 'co2', statistic = 'nwr')
########## Polar Plot ##########
polarPlot(testdata, pollutant = 'co2')
View(testdata)
testdata$ws = testdata$ws/5*1.492
testdata$wd = testdata$wd*22.5
########## Polar Plot ##########
polarPlot(testdata, pollutant = 'co2')
polarPlot(testdata, pollutant = 'co2', statistic = 'cpf',
uncertainty = TRUE)
polarPlot(testdata, pollutant = 'co2', statistic = 'nwr')
polarPlot(testdata, pollutant = 'co2', statistic = 'cpf',
uncertainty = TRUE)
testdata     = read.csv('2020-07-17--16.csv', header = TRUE)
colnames(testdata)[1:4] = c('UnixTime', 'ws', 'wd', 'co2')
testdata$date           = ISOdatetime(1970,1,1,0,0,0) + testdata$UnixTime
testdata$UnixTime       = NULL
testdata                = testdata[c(4,1,2,3)]
testdata$ws[testdata$ws == 0.0] = 0.1
testdata$ws = testdata$ws/5*1.492
testdata$wd = testdata$wd*22.5
plot(testdata$co2, type = 'l', col = 'red')
plot(testdata$wdavg, type = 'l', col = 'blue')
plot(testdata$wd, type = 'l', col = 'red')
########## Normal Plot ##########
plot(testdata$ws, type = 'l', col = 'red')
########## Polar Plot ##########
polarPlot(testdata, pollutant = 'co2')
polarPlot(testdata, pollutant = 'co2', statistic = 'cpf',
uncertainty = TRUE)
polarPlot(testdata, pollutant = 'co2', statistic = 'nwr')
list.files()
list.files()
list.files()
list.files()
getwd()
setwd()
mydata = read.csv('example.csv', header = TRUE)
getwd()
setwd()
setwd('C')
setwd('C:')
setwd('C:/users/Adriann Liceralde')
getwd()
setwd('C:/users/Adriann Liceralde/Desktop/Repo/WirelessSensor/Analysis/OpenAir Analysis/example.csv')
setwd('C:/users/Adriann Liceralde/Desktop/Repo/WirelessSensorNetwork/Analysis/OpenAir Analysis/example.csv')
getwd()
setwd('C:/users/Adriann Liceralde/Desktop/Repo/WirelessSensorNetwork/Analysis/OpenAir Analysis/example.csv')
setwd('C:/users/Adriann Liceralde/Desktop/Repo/WirelessSensorNetwork/Analysis/OpenAir Analysis')
getwd()
mydata = read.csv('example.csv', header = TRUE)
summary(mydata)
list.files()
list.files()
getwd()
setwd('C:/users/Adriann Liceralde/Desktop/Repo/WirelessSensorNetwork/Analysis/OpenAir Analysis')
mydata = read.csv('example.csv', header = TRUE)
summary(mydata)
mydata$date = as.POSIXct(strptime(mydata$date, format = "%d/%m/%Y %H:%M", tz ="GMT"))
summary(mydata)
names(mydata)
summary(mydata$nox)
mean(mydata$nox)
mean(mydata$nox, na.rm = TRUE)
hist(mydata$no2,
main = 'Histogram of NO2',
xlab = 'NO2 (ppb)')
newdata = na.omit(mydata)
plot(mydata$date[1:500], mydata$nox[1:500],
type = 'l',
xlab = 'date',
ylab = 'nox (ppb)')
means = aggregate(mydata["nox"],
format(mydata["date"], "%Y-%m"),
mean,
na.rm = TRUE)
means$date  = seq(min(mydata$date), max(mydata$date), length = nrow(means))
plot(means$date, means[, 'nox'], type = 'l')
means = aggregate(mydata["nox"],
format(mydata["date"], "%Y-%k"),
mean,
na.rm = TRUE)
plot(means)
means = aggregate(mydata["nox"],
format(mydata["date"], "%Y-%k"),
mean,
na.rm = TRUE)
plot(means)
plot(mydata$date[1:500], mydata$nox[1:500],
type = 'l',
xlab = 'date',
ylab = 'nox (ppb)')
#OPENAIR
library(openair)
?openair
?polarPlot
subdata = subset(mydata, as.numeric(rownames(mydata)) < 150,select = c(date, nox, no2, wd,ws))
polarPlot(subdata, fontsize = 20, na.rm = TRUE)
summaryPlot(selectByDate(mydata, year = c(2000, 2001)))
mydata$ws[mydata$ws < 0 ] = NA
summary(mydata)
list.files()
getwd()
setwd('C:/users/Adriann Liceralde/Desktop/Repo/WirelessSensorNetwork/Analysis/OpenAir Analysis')
mydata = read.csv('example.csv', header = TRUE)
summary(mydata)
mydata$date = as.POSIXct(strptime(mydata$date, format = "%d/%m/%Y %H:%M", tz ="GMT"))
summary(mydata)
names(mydata)
summary(mydata$nox)
mean(mydata$nox)
mean(mydata$nox, na.rm = TRUE)
hist(mydata$no2,
main = 'Histogram of NO2',
xlab = 'NO2 (ppb)')
newdata = na.omit(mydata)
plot(mydata$date[1:500], mydata$nox[1:500],
type = 'l',
xlab = 'date',
ylab = 'nox (ppb)')
means = aggregate(mydata["nox"],
format(mydata["date"], "%Y-%m"),
mean,
na.rm = TRUE)
means$date  = seq(min(mydata$date), max(mydata$date), length = nrow(means))
plot(means$date, means[, 'nox'], type = 'l')
means = aggregate(mydata["nox"],
format(mydata["date"], "%Y-%k"),
mean,
na.rm = TRUE)
plot(means)
#OPENAIR
library(openair)
?openair
?polarPlot
?openair
?polarPlot
subdata = subset(mydata, as.numeric(rownames(mydata)) < 150,select = c(date, nox, no2, wd,ws))
polarPlot(subdata, fontsize = 20, na.rm = TRUE)
summaryPlot(selectByDate(mydata, year = c(2000, 2001)))
mydata$ws[mydata$ws < 0 ] = NA
summary(mydata)
library(openair)
mydata = read.csv('example.csv', header = TRUE)
mydata$date = as.POSIXct(strptime(mydata$date, format = "%d/%m/%Y %H:%M", tz ="GMT"))
mydata$date = as.POSIXct(strptime(mydata$date, format = "%d/%m/%Y %H:%M", tz ="GMT"))
View(mydata)
mydata = read.csv('example.csv', header = TRUE)
View(mydata)
mydata$date = as.POSIXct(strptime(mydata$date, format = "%d/%m/%Y %H:%M", tz ="GMT"))
subdata = subset(mydata, as.numeric(rownames(mydata)) < 50,select = c(date, nox, no2, wd,ws))
subtestdata = subset(mydata, mydata$ws < 0)
#Summary Plot
summaryPlot(selectByDate(mydata))
summaryPlot(selectByDate(mydata, year = c(2000,2001), month = c(seq(1,10))),
period = 'months',
col.trend = 'BLACK',
col.data  = 'GREEN')
#Scatter Plot
scatterPlot(mydata, x = 'nox', y = 'no2', z = 'wd',
type = 'year')
#Time Variation
timeVariation(subdata, pollutant = 'nox',
local.tz = 'Europe/London')
#wiki list tz database
?timeVariation
